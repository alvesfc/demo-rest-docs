buildscript {
	ext {
		springBootVersion = '2.0.0.M7'
	}
	repositories {
		mavenCentral()
        jcenter()

        maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.0.0.M5"
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.6")

    }
}


apply plugin: 'org.asciidoctor.convert'


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'spring-cloud-contract'


group = 'com.example.rest.docs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


ext {
    snippetsDir = file('build/generated-snippets')
    springCloudVersion = 'Finchley.M5'
}

ext['spring-restdocs.version'] = '2.0.0.RELEASE'


dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.cloud:spring-cloud-starter-sleuth')
	testCompile('org.springframework.cloud:spring-cloud-starter-contract-stub-runner')
	testCompile('org.springframework.cloud:spring-cloud-starter-contract-verifier')
	testCompile('org.springframework.cloud:spring-cloud-contract-wiremock')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')

    testCompile 'io.rest-assured:rest-assured:3.0.2'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.restdocs:spring-restdocs-restassured'

   // asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.0.RELEASE'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.0.RELEASE'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


contracts {
    baseClassForTests = 'com.example.rest.docs.demorestdocs.MvcTest'
    // fully qualified name to a class that will be the base class for your generated test classes
}

task stubsJar(type: Jar) {
    classifier = "stubs"
    into('/') {
        include('**/com/example/rest/docs/demorestdocs/hello/*.*')
        from("${project.rootDir}/src/main/java/")
    }
    into('/') {
        include('**/com/example/rest/docs/demorestdocs/hello/*.*')
        from("${project.buildDir}/classes/main")
    }
    into("META-INF/${project.group}/${project.name}/${project.version}/mappings") {
        include('**/*.*')
        from("${project.rootDir}/build/snippets/stubs")
    }
    into("META-INF/${project.group}/${project.name}/${project.version}/contracts") {
        include('**/*.groovy')
        from("${project.rootDir}/src/test/resources/contracts")
    }
}
// we need the tests to pass to build the stub jar
stubsJar.dependsOn(test)
// we want to disable the default Spring Cloud Contract stub jar generation
verifierStubsJar.enabled = false

artifacts {
    archives stubsJar
}


asciidoctor {
    sourceDir = file('docs')
    sources {
        include 'index.adoc'
    }
    outputDir = file('docs')
    separateOutputDirs = false
    resources { }
    attributes 'source-highlighter': 'prettify'

}

task removeHtml() {
    doLast {
        FileTree tree = fileTree(dir: 'docs', include: ['**/*.html'])
        tree.each {
            it.delete()
        }
    }
}

asciidoctor.mustRunAfter removeHtml

task generateDocumentation(dependsOn: ["removeHtml", "asciidoctor"]) {
    group = "Documentation"
    description = "Creates full documentation for the project"
}